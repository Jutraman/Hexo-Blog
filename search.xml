<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/cs/network/git/</url>
    <content><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>分布式</li>
<li>按照元数据存储</li>
<li>有分支，但没有全局版本号</li>
<li>SHA-1</li>
</ul>
<h2 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h2><ul>
<li>工作区</li>
<li>暂存区（stage，index）</li>
<li>版本库（repo）</li>
<li>远程仓库（remote repo）</li>
</ul>
<p>以下个人理解：</p>
<p>工作区是实际文件增删改查的区域，也是原始操作发生的部分；暂存区是对需要版本管理的文件进行监控的区域，是一个包含文件索引的目录树，是一个虚拟工作区，只记录文件状态；版本库包含暂存区和实际文件内容存储部分和改变部分，其中 Head 指针指向 master，但是其中有多个版本，甚至 head 不是暂存区的最新状态；远程仓库更像是一种远程备份或者远程主文件，直接被推送的本地库覆盖或者本地直接拉取远程库内容。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>系统配置 /etc/gitconfig</li>
<li>用户配置 ~/gitconfig</li>
<li>repo配置 .git/config</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 设置全局用户名，也可以不使用 global 参数，设置当前.git 的用户名
git config --global user.name &quot;xxx&quot;
git config --global user.email xxx

git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="常用-Git-服务器"><a href="#常用-Git-服务器" class="headerlink" title="常用 Git 服务器"></a>常用 Git 服务器</h2><ul>
<li>Github</li>
<li>Gitee</li>
<li>Private Server</li>
</ul>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 创建
git init
git init xxx

## 添加文件
git add [file1] [file2] ... 
git add &lt;dir&gt;

## 拷贝
git clone &lt;repo&gt; &lt;dir&gt;

## 查看
git status
git status -s # 简讯

## 比较暂存区和工作区差异
git diff [file]
## 比较暂存区和上一次提交的差异
git diff --cached [file]
git diff --staged [file]
## 比较两次提交之间的差异
git diff [branch1] [branch2]


## 提交：暂存区-&gt;本地仓库
git commit -m [message]
git commit [file1] [file2] ... -m [message]
git commit -a # 跳过 git add

## 回退版本
git reset [--soft | --mixed | --hard] [HEAD]

## 从暂存区和工作区中删除
git rm &lt;file&gt;
git rm -f &lt;file&gt;
## 只从暂存区删除
git rm --cached &lt;file&gt;
## 删除目录
git rm -r *

## 移动
git mv [file] [newfile]
git mv -f [file] [newfile]

## 日志
git log
git log --oneline
git log --graph
git log --reverse
git log --author&#x3D;xxx
git log --no-merges
git log --decorate
git log --since&#x3D;&#123;...&#125;
git log --before&#x3D;&#123;...&#125;
git log --until&#x3D;&#123;...&#125;
git log --after&#x3D;&#123;...&#125;
git blame &lt;file&gt;

## 远程仓库
git remote -v
git remote show [remote]
git remote add [shortname] [url]
git remote rm shortname
git remote rename old_name new_name

## 抓取
git fetch [alias]
git merge [alias]&#x2F;[branch]

git pull &lt;remote_host&gt; &lt;remote_branch&gt;:&lt;local_branch&gt;

## 推送
git push &lt;remote_host&gt; &lt;local_branch&gt;:&lt;remote_branch&gt;

## 分支管理
git branch [-d] (branch_name)
git checkout [-b] (branch_name)

## 标签
git tag
git tag -a &lt;tag_name&gt; -m &quot;tag_description&quot;
git tag -s &lt;tag_name&gt; -m &quot;tag_description&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>CS</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Remote Access</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Apache</title>
    <url>/cs/network/hexo-apache/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>静态博客</li>
<li>基于 Node.js</li>
<li>适用于 Windows，MacOS，Linux 等系统</li>
<li>官方文档 <a class="link"   target="_blank" rel="noopener" href="https://hexo.io/" >https://hexo.io/<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文使用的机器环境为 </p>
<ul>
<li><p>客户端</p>
<ul>
<li>macOS Monterey 12+</li>
<li>Node.js 17.6</li>
<li>npm 8.5</li>
<li>Hexo 6.0</li>
<li>OpenSSH 8.6</li>
<li>Git 2.32</li>
</ul>
</li>
<li><p>服务器端</p>
<ul>
<li>Alibaba Cloud Linux release 3</li>
<li>Apache 2.4.37</li>
<li>OpenSSH 8.0</li>
<li>Git 2.27</li>
</ul>
</li>
</ul>
<hr>
<h2 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h2><h4 id="安装必备程序"><a href="#安装必备程序" class="headerlink" title="安装必备程序"></a>安装必备程序</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## macOS 有多种安装方式，这里使用 brew，如果系统有预装版本，不需要更新
brew install node
brew install openssh
brew install git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g hexo-cli
## 局部安装
# npm install hexo
## hexo是 Hexo 实际依赖的主体命令包，hexo-cli全称 hexo command line interface，是命令行全局指令，会自动将 hexo 安装到目标文件夹的 node_modules 目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 初始化博客根目录
hexo init &lt;folder&gt; 
# &lt;folder&gt; 是客户端 Hexo 安装的根目录，以后的所有文件和操作都是在这个目录下完成

# 在默认安装情况下，hexo 命令只在根目录下生效
cd &lt;folder&gt;
# 安装必要的 node.js 模块
npm install

npm install hexo-themes-name
# git clone hexo-themes-name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h6 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h6><p>根目录如下：<br><pre class="line-numbers language-dir" data-language="dir"><code class="language-dir">.
├── _config.yml # Hexo 配置文件
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>直接修改配置文件 <code>_config.yml</code> ,具体每项参数参考官方文档，本文采用远程服务器做 Hexo Server， 所以部署(<code>deploy</code>)部分需要特别处理：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> user_name@remote_server_ip<span class="token punctuation">:</span>remote_server_git_folder
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master

<span class="token comment">## 以下是我的配置示例</span>
<span class="token comment"># 需要提前安装 git 插件</span>
<span class="token comment"># npm install hexo-deployer-git</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> hexo@x.x.x.x<span class="token punctuation">:</span>/var/www/blog/hexo.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h6 id="Theme-配置"><a href="#Theme-配置" class="headerlink" title="Theme 配置"></a>Theme 配置</h6><p>本文使用<code>Keep</code>作为主题，配置文件是 <code>&lt;folder&gt;/themes/keep/_config.yml</code>，具体设置参考官方文档 <a class="link"   target="_blank" rel="noopener" href="https://keep.xpoet.cn/" >https://keep.xpoet.cn/<i class="fas fa-external-link-alt"></i></a> 。</p>
<h6 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h6><ul>
<li>SSH 免密登录<br>  将私钥（可以本机生成，可以服务器生成，可以通过其他途径生成）<code>id_rsa.pem</code>，安装到<code>~/.ssh/</code>中，并在该目录下添加配置信息，如下：  <pre class="line-numbers language-config" data-language="config"><code class="language-config"># 输入服务器公网ip
Host x.x.x.x
# 输入ECS实例的公网IP地址。
HostName x.x.x.x
# 输入端口号，默认为22。
Port 22
# 输入登录账号。
User user_name
# 输入.pem私钥文件在本机的地址。
IdentityFile ~&#x2F;.ssh&#x2F;id_rsa.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Git<br>  通过 Git 将本地生成的静态博客页面推送到服务器端，所以本地有所有博客的原始编辑文件，客户端有博客的 <code>public</code> 文件夹，用以访问。相比于 <code>hexo-admin</code>, Git 这种方式不容易被暴力破解,只要更新 hexo 时注意，文件也有本地备份，但是不如另一种方式方便。</li>
</ul>
<hr>
<h2 id="服务器端安装"><a href="#服务器端安装" class="headerlink" title="服务器端安装"></a>服务器端安装</h2><h4 id="安装必备程序-1"><a href="#安装必备程序-1" class="headerlink" title="安装必备程序"></a>安装必备程序</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install git
yum install httpd
yum install openssh

systemctl start httpd
systemctl start sshd
systemctl enable git-daemon

# 一般不要使用 root 用户，作为远程连接用户，最好可以新开一个
adduser hexo
password xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="设置-Git-仓库"><a href="#设置-Git-仓库" class="headerlink" title="设置 Git 仓库"></a>设置 Git 仓库</h4><p>这里的 Git 仓库，并不开放访问权限，将发布页面连接到 Apache 允许访问的文件夹。<br><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;home&#x2F;blog
cd &#x2F;home&#x2F;blog
git init --bare hexo.git
vim &#x2F;home&#x2F;blog&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive
## 写在文件中
#git --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;html --git-dir&#x3D;&#x2F;home&#x2F;blog&#x2F;hexo.git checkout -f
chmode +x &#x2F;home&#x2F;blog&#x2F;hexo.git&#x2F;hooks&#x2F;post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="设置-Apache-文件夹"><a href="#设置-Apache-文件夹" class="headerlink" title="设置 Apache 文件夹"></a>设置 Apache 文件夹</h4><p>如果不使用 <code>/var/www/html</code> 作为访问路径，可以重定向 Apache 的解析目录。<br><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf
## 修改 Directory 标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<h4 id="设置-SSH-免密登录"><a href="#设置-SSH-免密登录" class="headerlink" title="设置 SSH 免密登录"></a>设置 SSH 免密登录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将 id_rsa.pub 添加到 ~&#x2F;.ssh&#x2F;authorized_keys 中&#96;
cat id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys

# 有 700 和 600 权限就足够使用，744 和 644 按说也可以，但是在权限限定比较严格的 Linux 中，可能会报错。
chmod 700 ~&#x2F;.ssh
chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys

# 在测试联通后，修改 ssh 配置文件，将远程密码和 root 登录取消，提高安全防控，并且允许密钥访问。
vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config
# PasswordAuthentication no
# PermitRootLogin no
# PubkeyAuthentication yes

systemctl restart sshd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean
hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><ul>
<li>主题</li>
<li>页内搜索</li>
<li>流量分析</li>
<li>私有域名</li>
<li>SEO</li>
<li>多语种发布</li>
<li>…</li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github</title>
    <url>/cs/network/hexo-github/</url>
    <content><![CDATA[<h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p>具体步骤参考 <code>Hexo+apache</code> <a class="link"   target="_blank" rel="noopener" href="http://jutraman.tech/cs/network/hexo-apache/" >http://jutraman.tech/cs/network/hexo-apache/<i class="fas fa-external-link-alt"></i></a> ，除Git,SSH 设置和服务器端设置外，其他相同。</p>
<ul>
<li>node.js</li>
<li>Hexo</li>
<li>Git  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">deploy:
    type: git
    repo: git@github.com:user_name&#x2F;user_name.github.io
    branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>SSH<ul>
<li>github 将公钥添加在 <code>settings-&gt;SSH and GPG Keys</code></li>
<li>私钥和上篇博文一样处理</li>
</ul>
</li>
</ul>
<h2 id="服务器端-Github-com"><a href="#服务器端-Github-com" class="headerlink" title="服务器端(Github.com)"></a>服务器端(Github.com)</h2><ol>
<li>新建 repository<ul>
<li>Owner: user_name</li>
<li>Repo name: user_name.github.io  # 这个名字是必须的</li>
<li>Public</li>
</ul>
</li>
<li>开启 Github Page, 打开 user_name.github.io 测试，一般默认是打开的。</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo clean &amp;&amp; hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>CS</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>PageRank</title>
    <url>/cs/network/pagerank/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>Larry Page</li>
<li>Google</li>
<li>不是网页排名的唯一算法</li>
<li>最早最著名的算法</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>链接分析算法</li>
<li>基于图论：网页是结点，超链接是边，权威性是权重</li>
<li>系列算法：根据比较点不同有多种变种和优化</li>
<li>迭代</li>
<li><img src="pr.svg" alt="PR" title="PageRank"></li>
</ul>
]]></content>
      <categories>
        <category>CS</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Website</tag>
        <tag>Search Engine</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH</title>
    <url>/cs/network/ssh/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>网络协议</li>
<li>加密通讯</li>
<li>OpenSSH</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li>远程主机收到用户的登录请求，将公钥发给用户；</li>
<li>用户使用公钥，将登录密码加密后，发送给主机；</li>
<li>远程主机用自己的私钥，解密密码。</li>
</ol>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>密钥本身没有证书中心（CA）公证，攻击者可以冒充服务器，截取登录密码，进而登录服务器。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 登录
ssh user@host

## 加密
ssh-keygen

## 拷贝密钥
ssh-copy-id

## 添加密钥
ssh-add

## 详细指令
ssh [-B bind_interface] [-b bind_address] [-c cipher_spec] 
    [-D [bind_address:]port][-E log_file] [-e escape_char] 
    [-F configfile] [-I pkcs11] [-i identity_file] 
    [-J [user@]host[:port]] [-L address] [-l login_name] 
    [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]
    [-Q query_option] [-R address] [-S ctl_path] [-W host:port]
    [-w local_tun[:remote_tun]] destination [command]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>CS</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Remote Access</tag>
        <tag>Blog</tag>
        <tag>Encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>动手学深度学习-学习笔记1</title>
    <url>/cs/ai/dong-shou-xue-shen-du-xue-xi-xue-xi-bi-ji-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS</category>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
</search>
